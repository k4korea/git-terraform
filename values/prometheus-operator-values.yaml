
# prometheusOperator:
#   affinity:
#     nodeAffinity:
#       requiredDuringSchedulingIgnoredDuringExecution:
#         nodeSelectorTerms:
#           - matchExpressions:
#             - key: node.kubernetes.io/role
#               operator: In
#               values:
#               - ops
  # resources:
  #   limits:
  #     cpu: 150m
  #     memory: 300Mi
  #   requests:
  #     cpu: 150m
  #     memory: 300Mi
kube-state-metrics:
  replicas: 1
prometheus:
  prometheusSpec:
    enableAdminAPI: true
    replicas: 1
    # podAntiAffinity: "hard"
    # affinity:
    #   nodeAffinity:
    #     requiredDuringSchedulingIgnoredDuringExecution:
    #       nodeSelectorTerms:
    #         - matchExpressions:
    #           - key: node.kubernetes.io/role
    #             operator: In
    #             values:
    #             - ops
  
   
    query:
      maxSamples: 800000000

    storageSpec:
      volumeClaimTemplate:
        spec:
          storageClassName: csi-hostpath-sc
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 1Gi
          

    # additionalScrapeConfigs:
    # # scrape config for service endpoints.
    # - job_name: 'kubernetes-service-endpoints'
    #   kubernetes_sd_configs:
    #   - role: endpoints
    #   relabel_configs:
    #   - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
    #     action: keep
    #     regex: true
    #   - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
    #     action: replace
    #     target_label: __scheme__
    #     regex: (https?)
    #   - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
    #     action: replace
    #     target_label: __metrics_path__
    #     regex: (.+)
    #   - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
    #     action: replace
    #     target_label: __address__
    #     regex: ([^:]+)(?::\d+)?;(\d+)
    #     replacement: $1:$2
    #   - action: labelmap
    #     regex: __meta_kubernetes_service_label_(.+)
    #   - source_labels: [__meta_kubernetes_namespace]
    #     action: replace
    #     target_label: kubernetes_namespace
    #   - source_labels: [__meta_kubernetes_service_name]
    #     action: replace
    #     target_label: kubernetes_name
    # - job_name: 'kubernetes-pods'
    #   kubernetes_sd_configs:
    #   - role: pod
    #   relabel_configs:  # If first two labels are present, pod should be scraped  by the istio-secure job.
    #   - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
    #     action: keep
    #     regex: true
    #   - source_labels: [__meta_kubernetes_pod_annotation_sidecar_istio_io_status]
    #     action: drop
    #     regex: (.+)
    #   - source_labels: [__meta_kubernetes_pod_annotation_istio_mtls]
    #     action: drop
    #     regex: (true)
    #   - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
    #     action: replace
    #     target_label: __metrics_path__
    #     regex: (.+)
    #   - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
    #     action: replace
    #     regex: ([^:]+)(?::\d+)?;(\d+)
    #     replacement: $1:$2
    #     target_label: __address__
    #   - action: labelmap
    #     regex: __meta_kubernetes_pod_label_(.+)
    #   - source_labels: [__meta_kubernetes_namespace]
    #     action: replace
    #     target_label: namespace
    #   - source_labels: [__meta_kubernetes_pod_name]
    #     action: replace
    #     target_label: pod_name