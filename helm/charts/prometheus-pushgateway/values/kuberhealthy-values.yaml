# Default values for kuberhealthy.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

prometheus:
  enabled: true
  name: "prometheus"
  release: prometheus-operator
  enableScraping: true
  serviceMonitor: true
  enableAlerting: true

image:
  repository: kuberhealthy/kuberhealthy
  tag: v2.2.0

resources:
  requests:
    cpu: 400m
    memory: 300Mi
  limits:
    cpu: 400m
    memory: 500Mi

tolerations:
  # change to true to tolerate and deploy to masters
  master: false

deployment:
  replicas: 1
  maxSurge: 0
  maxUnavailable: 1
  imagePullPolicy: IfNotPresent
  nodeSelector:
    node.kubernetes.io/role: ops
  podAnnotations: {}
  env: {}
  command:
  - /app/kuberhealthy
  # args:

# When enabled equals to true, runAsUser and fsGroup will be
# included to all khchecks as specified below.
securityContext:
  enabled: true # if enabled is set to false, securityContext settings will not be applied at all in checker pod custom resources
  runAsNonRoot: true
  runAsUser: 999
  fsGroup: 999
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: true

# Please remember that changing the service type to LoadBalancer
# will expose Kuberhealthy to the internet, which could cause
# error messages shown by Kuberhealthy to be exposed to the
# public internet.  It is recommended to create the service
# with ClusterIP, then to manually edit the service in order to
# securely expose the port in an appropriate way for your
# specific environment.
service:
  externalPort: 80
  type: ClusterIP
  #type: LoadBalancer
  annotations: {}

check:
  daemonset:
    enabled: false
    runInterval: 15m
    timeout: 12m
    image:
      repository: kuberhealthy/daemonset-check
      tag: v2.2.2
    extraEnvs:
    nodeSelector:
      node.kubernetes.io/role: ops
  deployment:
    enabled: false
    runInterval: 10m
    timeout: 15m
    image:
      repository: kuberhealthy/deployment-check
      tag: v1.4.4
    extraEnvs:
      CHECK_DEPLOYMENT_REPLICAS: "4"
      CHECK_DEPLOYMENT_ROLLING_UPDATE: "true"
      CHECK_SERVICE_ACCOUNT: "default"
    nodeSelector:
      node.kubernetes.io/role: ops
  dnsInternal:
    enabled: false
    runInterval: 2m
    timeout: 15m
    image:
      repository: kuberhealthy/dns-resolution-check
      tag: v1.2.0
    extraEnvs:
      HOSTNAME: "kubernetes.default"
    nodeSelector:
      node.kubernetes.io/role: ops
  podRestarts:
    enabled: false
    runInterval: 5m
    timeout: 10m
    image:
      repository: kuberhealthy/pod-restarts-check
      tag: v2.2.1
    extraEnvs:
      MAX_FAILURES_ALLOWED: "10"
    nodeSelector:
      node.kubernetes.io/role: ops
  podStatus:
    enabled: false
    runInterval: 5m
    timeout: 15m
    image:
      repository: kuberhealthy/pod-status-check
      tag: v1.2.2
    extraEnvs:
    nodeSelector:
      node.kubernetes.io/role: ops
  networkConnection:
    enabled: false
    runInterval: 30m
    timeout: 10m
    image:
      repository: kuberhealthy/network-connection-check
      tag: v0.1.0
    extraEnvs:
      CONNECTION_TARGET: "tcp://github.com:443"
    nodeSelector:
      node.kubernetes.io/role: ops

checkReaper:
  enabled: true # Don't disable checkReaper, this flag exist to make e2e tests easier.
  image:
    repository: kuberhealthy/check-reaper
    tag: v1.3.1
  nodeSelector:
    node.kubernetes.io/role: ops
